pipeline {
    agent any

    environment {
        APP_IMAGE = "my-app:latest"
        BACKEND_REPO = "https://github.com/AlinaMinackova/RepoBackend.git"
    }

    triggers {
        // –ê–≤—Ç–æ–∑–∞–ø—É—Å–∫ –ø–æ –ø—É—à–∞–º (–º–æ–∂–Ω–æ –∑–∞–º–µ–Ω–∏—Ç—å –Ω–∞ webhook)
        pollSCM('* * * * *')
    }

    options {
        timestamps()  // —á—Ç–æ–±—ã –≤ –ª–æ–≥–µ –±—ã–ª–∏ —Ç–∞–π–º—Å—Ç–µ–º–ø—ã
    }

    stages {
        stage('Checkout Backend') {
            steps {
                dir('backend') {
                    git branch: 'main', url: "${BACKEND_REPO}"
                }
            }
        }

        stage('Build Backend Jar & Docker Image') {
            steps {
                dir('backend') {
                    sh './mvnw clean package -DskipTests'
                    sh 'docker build -t my-app:latest .'
                }
            }
        }

        stage('Run Tests with Allure') {
            steps {
                echo "–ó–∞–ø—É—Å–∫ –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ Gradle..."
                sh './gradlew clean test'
            }

            post {
                always {
                    echo "–°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã Allure..."
                    // –ê—Ä—Ö–∏–≤–∏—Ä—É–µ–º allure-results –¥–ª—è –æ—Ç—á—ë—Ç–∞
                    allure([
                        includeProperties: false,
                        jdk: '',
                        results: [[path: 'build/allure-results']]
                    ])
                }
            }
        }
    }

    post {
        always {
            echo "üßπ –û—á–∏—Å—Ç–∫–∞ Docker –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
            sh 'docker system prune -f'
        }

        success {
            echo '‚úÖ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!'
        }

        failure {
            echo '‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤!'
        }
    }
}